plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.3.24'
}

version = "mc1.12-r32"
group= "flammpfeil.slashblade" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "SlashBlade"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

minecraft {
    mcVersion.set('1.12.2')

    mcpMappingChannel.set('snapshot')
    mcpMappingVersion.set('20171003')
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version, 'modname':project.archivesBaseName, 'modid':project.group
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

repositories {
    maven {
        name 'CleanroomMC Maven'
        url 'https://maven.cleanroommc.com'
    }
}

dependencies {
    runtimeOnly fileTree(dir: 'libs', include: '*.jar')
}

def defaultEncoding = 'UTF-8'
tasks.withType(AbstractCompile) each {
    it.options.encoding = defaultEncoding
    it.options.compilerArgs += ['-source', '1.8', '-target', '1.8']
}

compileTestJava {
    options.encoding = defaultEncoding
    options.compilerArgs += ['-source', '1.8', '-target', '1.8']
}


jar {
    manifest {
        //attributes 'FMLCorePlugin': 'mods.flammpfeil.slashblade.asm.CorePlugin'
        attributes 'FMLCorePluginContainsFMLMod': true
    }
}

/*
task deobfJar(type: Jar) {
    from sourceSets.main.output
    from sourceSets.main.allSource
    classifier = 'deobf'
}


artifacts {
    archives sourceZip
    archives deobfJar
}

 */